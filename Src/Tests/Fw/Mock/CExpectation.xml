<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Tests.Fw.Mock.CExpectation">
<Super>%RegisteredObject</Super>
<TimeCreated>63854,41673.909456</TimeCreated>

<Property name="instance">
<Type>%RegisteredObject</Type>
<Private>1</Private>
</Property>

<Property name="strMethodName">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="lstParameters">
<Type>%ListOfDataTypes</Type>
<Private>1</Private>
</Property>

<Property name="nTimes">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
<Private>1</Private>
</Property>

<Property name="returnValue">
<Description>
No As since it can be a DataType or an object which have no common base.</Description>
<Private>1</Private>
</Property>

<Method name="%OnNew">
<Internal>1</Internal>
<FormalSpec>instance:%RegisteredObject,strMethodName:%String,lstParameters:%ListOfDataTypes</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set ..instance = instance
   set ..strMethodName = strMethodName
   set ..lstParameters = lstParameters
   
   quit $$$OK
]]></Implementation>
</Method>

<Method name="Times">
<Description>
Sets the number of time to expect this method in a row. Returns $THIS to enable chaining.
Usage example: do ..expect(mock.call(param1, param2, param3)).andReturn("return").times(1)
See also: Tests.Fw.Mock.CMockManager</Description>
<FormalSpec>nTimes:%Integer</FormalSpec>
<ReturnType>Tests.Fw.Mock.CExpectation</ReturnType>
<Implementation><![CDATA[
   set ..nTimes = nTimes
   
   quit $THIS
]]></Implementation>
</Method>

<Method name="AndReturn">
<Description>
Specifies the return value of this expectation. Returns $THIS to enable chaining.
Usage example: do ..expect(mock.call(param1, param2, param3)).andReturn("return").times(1)
See also: Tests.Fw.Mock.CMockManager</Description>
<FormalSpec>returnValue</FormalSpec>
<ReturnType>Tests.Fw.Mock.CExpectation</ReturnType>
<Implementation><![CDATA[
   set ..returnValue = returnValue
   quit $THIS
]]></Implementation>
</Method>

<Method name="GetInstance">
<Internal>1</Internal>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[   quit ..instance
]]></Implementation>
</Method>

<Method name="GetMethodName">
<Internal>1</Internal>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[   quit ..strMethodName
]]></Implementation>
</Method>

<Method name="GetLstParameters">
<Internal>1</Internal>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[   quit ..lstParameters
]]></Implementation>
</Method>

<Method name="GetTimes">
<Internal>1</Internal>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[   quit ..nTimes
]]></Implementation>
</Method>

<Method name="DecrementTimes">
<Internal>1</Internal>
<Implementation><![CDATA[   set ..nTimes = ..nTimes - 1
]]></Implementation>
</Method>

<Method name="GetReturnValue">
<Description>
Since the return type is unknown we cant't specify %RegisteredObject or %DataType as the return value.</Description>
<Internal>1</Internal>
<Implementation><![CDATA[   quit ..returnValue
]]></Implementation>
</Method>
</Class>
</Export>
