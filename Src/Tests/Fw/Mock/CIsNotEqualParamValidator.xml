<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Tests.Fw.Mock.CIsNotEqualParamValidator">
<Super>%RegisteredObject,Tests.Fw.Mock.IMockParamValidator</Super>
<TimeCreated>63929,38500.116613</TimeCreated>

<Property name="itemToCompare">
</Property>

<Method name="%OnNew">
<Internal>1</Internal>
<FormalSpec>itemToCompare</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set ..itemToCompare = itemToCompare

   quit $$$OK
]]></Implementation>
</Method>

<Method name="Validate">
<Internal>1</Internal>
<FormalSpec>item</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   #dim status As %Status = $$$ERROR("Equal")
   
   if ($data(item) && $IsObject(item) && $IsObject(..itemToCompare))
   {
      try
      {
         set status = 'item.IsEqual(..itemToCompare)
      }
      catch
      {
         if (item.%Extends("%Collection.AbstractList") && ..itemToCompare.%Extends("%Collection.AbstractList"))
         {
            set:('##class(chs.Fw.EnsExt.Lib.CClassTools).IsEqualList(item, ..itemToCompare)) status = $$$OK
         }
         elseif(..itemToCompare '= item)
         {
            set status = $$$OK
         }
         else
         {
            set status = $$$ERROR("Items are the same.")
         }
      }
   }
   // Else it is a datatype.
   elseif (..itemToCompare '= item)
   {
      set status = $$$OK
   }
   
   quit status
]]></Implementation>
</Method>

<Method name="GetAssertDescription">
<Internal>1</Internal>
<FormalSpec>nIndex:%Integer,strMethodName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  
   quit "Expected Parameter(" _ nIndex _ ") Not Equal for method: " _ strMethodName _ " Got equal"
]]></Implementation>
</Method>
</Class>
</Export>
